#%RAML 0.8
title: Swagger
version: v1
schemas: 
    - 
        Order: |
                {
                  "type" : "object",
                  "properties" : {
                    "petId" : {
                      "type" : "integer",
                      "format" : "int64"
                    },
                    "quantity" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "id" : {
                      "type" : "integer",
                      "format" : "int64"
                    },
                    "shipDate" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "complete" : {
                      "type" : "boolean"
                    },
                    "status" : {
                      "type" : "string",
                      "description" : "Order Status",
                      "enum" : [ "placed", "approved", "delivered" ]
                    }
                  },
                  "xml" : {
                    "name" : "Order"
                  }
                }
        Category: |
                {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "id" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  },
                  "xml" : {
                    "name" : "Category"
                  }
                }
        User: |
                {
                  "type" : "object",
                  "properties" : {
                    "firstName" : {
                      "type" : "string"
                    },
                    "lastName" : {
                      "type" : "string"
                    },
                    "password" : {
                      "type" : "string"
                    },
                    "userStatus" : {
                      "type" : "integer",
                      "format" : "int32",
                      "description" : "User Status"
                    },
                    "phone" : {
                      "type" : "string"
                    },
                    "id" : {
                      "type" : "integer",
                      "format" : "int64"
                    },
                    "email" : {
                      "type" : "string"
                    },
                    "username" : {
                      "type" : "string"
                    }
                  },
                  "xml" : {
                    "name" : "User"
                  }
                }
        Tag: |
                {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "id" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  },
                  "xml" : {
                    "name" : "Tag"
                  }
                }
        ApiResponse: |
                {
                  "type" : "object",
                  "properties" : {
                    "code" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "type" : {
                      "type" : "string"
                    },
                    "message" : {
                      "type" : "string"
                    }
                  }
                }
        Pet: |
                {
                  "type" : "object",
                  "required" : [ "photoUrls", "name" ],
                  "properties" : {
                    "photoUrls" : {
                      "type" : "array",
                      "xml" : {
                        "wrapped" : true
                      },
                      "items" : {
                        "type" : "string",
                        "xml" : {
                          "name" : "photoUrl"
                        }
                      }
                    },
                    "name" : {
                      "type" : "string",
                      "example" : "doggie"
                    },
                    "id" : {
                      "type" : "integer",
                      "format" : "int64"
                    },
                    "category" : {
                      "type" : "ref",
                      "refFormat" : "INTERNAL",
                      "$ref" : "#/definitions/Category",
                      "simpleRef" : "Category"
                    },
                    "tags" : {
                      "type" : "array",
                      "xml" : {
                        "wrapped" : true
                      },
                      "items" : {
                        "type" : "ref",
                        "refFormat" : "INTERNAL",
                        "$ref" : "#/definitions/Tag",
                        "simpleRef" : "Tag"
                      }
                    },
                    "status" : {
                      "type" : "string",
                      "description" : "pet status in the store",
                      "enum" : [ "available", "pending", "sold" ]
                    }
                  },
                  "xml" : {
                    "name" : "Pet"
                  }
                }
/store/inventory: 
    get: 
        description: Returns a map of status codes to quantities
        responses: 
            "200": 
                description: successful operation
                body: 
                    application/json: 
                        schema: |
                            {
                              "type" : "object",
                              "properties" : { }
                            }
/pet: 
    post: 
        body: 
            application/xml: 
                schema: Pet
            application/json: 
                schema: Pet
        responses: 
            "405": 
                description: Invalid input
    put: 
        body: 
            application/xml: 
                schema: Pet
            application/json: 
                schema: Pet
        responses: 
            "400": 
                description: Invalid ID supplied
            "404": 
                description: Pet not found
            "405": 
                description: Validation exception
    /findByStatus: 
        get: 
            description: Multiple status values can be provided with comma separated strings
            queryParameters: 
                status: 
                    description: Status values that need to be considered for filter
                    type: string
                    required: true
                    repeat: true
            responses: 
                "200": 
                    description: successful operation
                    body: 
                        application/xml: 
                            schema: |
                                {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "ref",
                                    "refFormat" : "INTERNAL",
                                    "$ref" : "#/definitions/Pet",
                                    "simpleRef" : "Pet"
                                  }
                                }
                        application/json: 
                            schema: |
                                {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "ref",
                                    "refFormat" : "INTERNAL",
                                    "$ref" : "#/definitions/Pet",
                                    "simpleRef" : "Pet"
                                  }
                                }
                "400": 
                    description: Invalid status value
    /findByTags: 
        get: 
            description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
            queryParameters: 
                tags: 
                    description: Tags to filter by
                    type: string
                    required: true
                    repeat: true
            responses: 
                "200": 
                    description: successful operation
                    body: 
                        application/xml: 
                            schema: |
                                {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "ref",
                                    "refFormat" : "INTERNAL",
                                    "$ref" : "#/definitions/Pet",
                                    "simpleRef" : "Pet"
                                  }
                                }
                        application/json: 
                            schema: |
                                {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "ref",
                                    "refFormat" : "INTERNAL",
                                    "$ref" : "#/definitions/Pet",
                                    "simpleRef" : "Pet"
                                  }
                                }
                "400": 
                    description: Invalid tag value
    /{petId}: 
        get: 
            description: Returns a single pet
            responses: 
                "200": 
                    description: successful operation
                    body: 
                        application/xml: 
                            schema: Pet
                        application/json: 
                            schema: Pet
                "400": 
                    description: Invalid ID supplied
                "404": 
                    description: Pet not found
            baseUriParameters: 
                petId: 
                    description: ID of pet to return
                    type: integer
                    required: true
                    repeat: false
        post: 
            body: 
                multipart/form-data: 
                    formParameters: 
                        name: 
                            description: Updated name of the pet
                            type: string
                            required: false
                            repeat: false
                        status: 
                            description: Updated status of the pet
                            type: string
                            required: false
                            repeat: false
            responses: 
                "405": 
                    description: Invalid input
            baseUriParameters: 
                petId: 
                    description: ID of pet that needs to be updated
                    type: integer
                    required: true
                    repeat: false
        delete: 
            headers: 
                api_key: 
                    type: string
                    required: false
                    repeat: false
            responses: 
                "400": 
                    description: Invalid ID supplied
                "404": 
                    description: Pet not found
            baseUriParameters: 
                petId: 
                    description: Pet id to delete
                    type: integer
                    required: true
                    repeat: false
        /uploadImage: 
            post: 
                body: 
                    multipart/form-data: 
                        formParameters: 
                            file: 
                                description: file to upload
                                type: string
                                required: false
                                repeat: false
                            additionalMetadata: 
                                description: Additional data to pass to server
                                type: string
                                required: false
                                repeat: false
                responses: 
                    "200": 
                        description: successful operation
                        body: 
                            application/json: 
                                schema: ApiResponse
                baseUriParameters: 
                    petId: 
                        description: ID of pet to update
                        type: integer
                        required: true
                        repeat: false
/user: 
    post: 
        description: This can only be done by the logged in user.
        body: 
            application/json: 
                schema: User
    /{username}: 
        get: 
            responses: 
                "200": 
                    description: successful operation
                    body: 
                        application/xml: 
                            schema: User
                        application/json: 
                            schema: User
                "400": 
                    description: Invalid username supplied
                "404": 
                    description: User not found
            baseUriParameters: 
                username: 
                    description: The name that needs to be fetched. Use user1 for testing.
                    type: string
                    required: true
                    repeat: false
        put: 
            description: This can only be done by the logged in user.
            body: 
                application/json: 
                    schema: User
            responses: 
                "400": 
                    description: Invalid user supplied
                "404": 
                    description: User not found
            baseUriParameters: 
                username: 
                    description: name that need to be updated
                    type: string
                    required: true
                    repeat: false
        delete: 
            description: This can only be done by the logged in user.
            responses: 
                "400": 
                    description: Invalid username supplied
                "404": 
                    description: User not found
            baseUriParameters: 
                username: 
                    description: The name that needs to be deleted
                    type: string
                    required: true
                    repeat: false
    /createWithList: 
        post: 
            body: 
                application/json: 
                    schema: |
                        {
                          "type" : "array",
                          "items" : {
                            "type" : "ref",
                            "refFormat" : "INTERNAL",
                            "$ref" : "#/definitions/User",
                            "simpleRef" : "User"
                          }
                        }
    /login: 
        get: 
            queryParameters: 
                password: 
                    description: The password for login in clear text
                    type: string
                    required: true
                    repeat: false
                username: 
                    description: The user name for login
                    type: string
                    required: true
                    repeat: false
            responses: 
                "200": 
                    description: successful operation
                    body: 
                        application/xml: 
                            schema: |
                                {
                                  "type" : "string"
                                }
                        application/json: 
                            schema: |
                                {
                                  "type" : "string"
                                }
                    headers: 
                        X-Rate-Limit: 
                            displayName: X-Rate-Limit
                            description: calls per hour allowed by the user
                            type: integer
                            required: false
                            repeat: false
                        X-Expires-After: 
                            displayName: X-Expires-After
                            description: date in UTC when token expires
                            type: string
                            required: false
                            repeat: false
                "400": 
                    description: Invalid username/password supplied
    /createWithArray: 
        post: 
            body: 
                application/json: 
                    schema: |
                        {
                          "type" : "array",
                          "items" : {
                            "type" : "ref",
                            "refFormat" : "INTERNAL",
                            "$ref" : "#/definitions/User",
                            "simpleRef" : "User"
                          }
                        }
    /logout: 
        get: 
/store/order: 
    post: 
        body: 
            application/json: 
                schema: Order
        responses: 
            "200": 
                description: successful operation
                body: 
                    application/xml: 
                        schema: Order
                    application/json: 
                        schema: Order
            "400": 
                description: Invalid Order
    /{orderId}: 
        get: 
            description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
            responses: 
                "200": 
                    description: successful operation
                    body: 
                        application/xml: 
                            schema: Order
                        application/json: 
                            schema: Order
                "400": 
                    description: Invalid ID supplied
                "404": 
                    description: Order not found
            baseUriParameters: 
                orderId: 
                    description: ID of pet that needs to be fetched
                    type: integer
                    required: true
                    repeat: false
                    minimum: 1
                    maximum: 1E+1
        delete: 
            description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
            responses: 
                "400": 
                    description: Invalid ID supplied
                "404": 
                    description: Order not found
            baseUriParameters: 
                orderId: 
                    description: ID of the order that needs to be deleted
                    type: integer
                    required: true
                    repeat: false
                    minimum: 1
documentation: 
    - 
        title: API Description
        content: "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."
    - 
        title: Terms of Service
        content: "http://swagger.io/terms/"
    - 
        title: License
        content: Apache 2.0
    - 
        title: License URL
        content: "http://www.apache.org/licenses/LICENSE-2.0.html"
    - 
        title: Find out more about Swagger
        content: "http://swagger.io"
#Not supported response code in RAML: default
#Property type in response header not  implemented: class com.softwareag.apigateway.api.model.rest.DateTimeProperty
